<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_bot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Health
STARTING_HEALTH = 100
current_health = STARTING_HEALTH;

// Movement
G = 0.8;
TERMINAL_VEL = 30;
HSPD = 5;
JUMP_VEL = 15;
jump_prev = false;
facing_right = true;
y_vel = 0;
x_vel = 0;

// Shield
SHIELD_MAX_HEALTH = 100;
SHIELD_DECAY = 1.0; // Per step
SHIELD_RECOVERY = 0.5; // Per step
SHIELD_MIN_ALPHA = 0.25; // 0 to 1
shielding = false;
shield_health = SHIELD_MAX_HEALTH;

// Attacks
ATTACK_CD = 1; // Secs
can_attack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_attack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Input Commands */
var left, right, down, attack, jump;
// Get from NN
/*
left = bot_actions[Action.left];
right = bot_actions[Action.right];
down = bot_actions[Action.down];
attack = bot_actions[Action.attack];
jump = bot_actions[Action.jump];
*/
// Get from User
left = keyboard_check(ord('A'));
right = keyboard_check(ord('D'));
jump = keyboard_check(ord('W'));
shield = keyboard_check(ord('S'));
attack = keyboard_check(ord('J'));

/* Process commands */
// Side Movement
if (left)
{
    facing_right = false;
    x_vel = -HSPD;
}
else if (right)
{
    facing_right = true;
    x_vel = HSPD;
}
else
    x_vel = 0;
// Jump
if (!jump_prev &amp;&amp; jump)
{
    if (place_meeting(x, y + 1, obj_wall))
        y_vel -= JUMP_VEL;
}
jump_prev = jump;
// Shield, TODO: Penalize broken shields
if (shield &amp;&amp; y_vel == 0)
{
    shield_health -= SHIELD_DECAY;
    if (shield_health &lt; 0)
        shield_health = 0;
        
    if (shield_health &gt; 0)
        shielding = true;
    else
        shielding = false;
}
else
{
    shielding = false;
    shield_health += SHIELD_RECOVERY;
    if (shield_health &gt; SHIELD_MAX_HEALTH)
        shield_health = SHIELD_MAX_HEALTH;
}
image_alpha = shield_health / (SHIELD_MAX_HEALTH * 1 / (1 - SHIELD_MIN_ALPHA)) + SHIELD_MIN_ALPHA;
if (shielding)
    x_vel = 0;
// Attack
if (attack &amp;&amp; can_attack)
{
    if (facing_right)
        dir_mult = 1;
    else
        dir_mult = -1;
    obj = instance_create(x + dir_mult * (HSPD  + sprite_get_width(sp_fireball) / 2 + sprite_get_width(sprite_index) / 2), 
                          y - sprite_get_height(sprite_index) / 2, obj_fireball);
    obj.dir = dir_mult;
    
    can_attack = false;
    alarm[0] = ATTACK_CD * room_speed;
}

/* Physics */
y_vel += G;
if (y_vel &gt; TERMINAL_VEL)
    y_vel = TERMINAL_VEL;

if (place_meeting(x + x_vel, y, obj_wall)) 
{
   while (!place_meeting(x + sign(x_vel), y, obj_wall)) 
      x += sign(x_vel);
   x_vel = 0;
}
if (place_meeting(x, y + y_vel, obj_wall)) 
{
   while (!place_meeting(x, y + sign(y_vel), obj_wall)) 
      y += sign(y_vel);
   y_vel = 0;
}

x += x_vel;
y += y_vel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var BAR_VERT_OFFSET = 5;
var BAR_HEIGHT = 5;

draw_self();

/* Draw health bar */
// Outline
draw_set_colour(c_black);
draw_rectangle(x - (sprite_get_width(sprite_index) / 2 + 1), 
               y - (sprite_get_height(sprite_index) + BAR_HEIGHT + BAR_VERT_OFFSET + 1),
               x + (sprite_get_width(sprite_index) / 2 + 1), 
               y - (sprite_get_height(sprite_index) - 1 + BAR_VERT_OFFSET),
               true);
// Fill
draw_set_colour(c_lime);
draw_rectangle(x - (sprite_get_width(sprite_index) / 2), 
               y - (sprite_get_height(sprite_index) + BAR_HEIGHT + BAR_VERT_OFFSET),
               x + (sprite_get_width(sprite_index) / 2) * (current_health / STARTING_HEALTH), 
               y - (sprite_get_height(sprite_index) + BAR_VERT_OFFSET),
               false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
